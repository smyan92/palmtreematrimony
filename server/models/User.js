const mongoose = require("mongoose");

// ===================================
// 1. Define the Nested Schema FIRST
// ===================================
const userPhotosSchema = new mongoose.Schema({
    profilePhotoUrls: {
        type: [String],
        default: [], // ЁЯСИ Best Practice: default роЖроХ роХро╛ро▓ро┐ропро╛рой роЕро░рпЗ
    },
    
    allPhotosUrls: {
        type: [String],
        default: [], // ЁЯСИ Best Practice: default роЖроХ роХро╛ро▓ро┐ропро╛рой роЕро░рпЗ
    },
    
    photoPrivacy: {
        type: String,
        default: 'public', // ЁЯСИ Best Practice: default роЖроХ String роородро┐рокрпНрокрпБ
    }
}, { _id: false });

// ===================================
// 2. Define the Main Schema
// ===================================
const userSchema = new mongoose.Schema(
    {
        // ======================================================
        // ЁЯФ╣ LOGIN DETAILS
        // ======================================================
    
    palmtreeId: {
        type: String,
        required: false, // роХроЯрпНроЯро╛ропрооро┐ро▓рпНро▓рпИ, роПройрпЖройро┐ро▓рпН рокродро┐ро╡рпБ роЪрпЖропрпНропрпБроорпН рокрпЛродрпБродро╛ройрпН роЗродрпБ роЙро░рпБро╡ро╛роХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ
        unique: true,   // роТро╡рпНро╡рпКро░рпБ роРроЯро┐ропрпБроорпН родройро┐родрпНродрпБро╡рооро╛ройродрпБ роОройрпНрокродрпИ роЙро▒рпБродро┐ роЪрпЖропрпНроп
        sparse: true    // роЗроирпНрод роГрокрпАро▓рпНроЯрпН роЗро▓рпНро▓ро╛род роЯро╛роХрпНроХрпБроорпЖрогрпНроЯрпНроХро│рпИ роЕройрпБроородро┐роХрпНроХро┐ро▒родрпБ
    },
    
    
        login: {
            mobileNo: { type: String, required: true, unique: true },
            fullName: { type: String, required: true },
            password: { type: String, required: true },
        },

        // ======================================================
        // ЁЯФ╣ BASIC DETAILS
        // ======================================================
        basic: {
            fullName: { type: String },
            dob: { type: Date },
            homeTown: { type: String },
            religion: { type: String },
            subCaste: { type: String },
            rasi: { type: String },
            star: { type: String },
            skinColor: { type: String },
            height: { type: String },
            weight: { type: String },
            foodHabit: { type: String },
            motherTongue: { type: String },
            chevaiDosham: { type: String },
            goldWeight: { type: String },
            physicalChallenge: { type: String },
        },

        // ======================================================
        // ЁЯФ╣ USER TYPE & PLAN
        // ======================================================
        // userType: {
        //     type: String,
        //     enum: ["admin", "user"],
        //     default: "user",
        // },
        // planType: {
        //     type: String,
        //     enum: ["premium", "normal"],
        //     default: "normal",
        // },
        // planDetails: {
        //     expiryDate: { type: Date },
        //     features: [{ type: String }],
        // },

        // ======================================================
        // ЁЯФ╣ EDUCATION & PROFESSIONAL DETAILS
        // ======================================================
        professional: {
            higherEducation: { type: String },
            jobTitle: { type: String },
            monthlySalary: { type: String },
            jobTown: { type: String },
        },

        // ======================================================
        // ЁЯФ╣ FAMILY DETAILS
        // ======================================================
        family: {
            homeType: { type: String },
            hasLoan: { type: Boolean },
            hasCar: { type: Boolean },
            propertyDetails: { type: String },
            drinkingHabit: { type: String },

        },

        // ======================================================
        // ЁЯФ╣ CONTACT DETAILS
        // ======================================================
        contact: {
            mobile: { type: String },
            alternativeNumber: { type: String },
        },

        // ======================================================
        // ЁЯФ╣ PARTNER PREFERENCES
        // ======================================================
    // ======================================================
// ЁЯФ╣ PARTNER PREFERENCES (родро┐ро░рпБродрпНродрокрпНрокроЯрпНроЯ рокро┐ро░ро┐ро╡рпБ)
// ======================================================
partnerPreferences: {
    partnerAgeFrom: { type: Number },
    partnerAgeTo: { type: Number },
    partnerMaritalStatus: { type: String},
    partnerHometown: { type: String},
    
    // ЁЯСЗ роЗроирпНрод Multi роГрокрпАро▓рпНроЯрпБроХро│рпН роЕройрпИродрпНродрпИропрпБроорпН [String] роОрой рооро╛ро▒рпНро▒ро╡рпБроорпН
    partnerJobTown: { type: [String], default: undefined,
    required: false}, 
    
    partnerReligion: { type: String, trim: true },
    partnerSubcaste: { type: String, trim: true },
    partnerEducation: { type: String, trim: true },
    partnerJob: { type: String, trim: true },
    partnerSalary: { type: String, trim: true },
    
    // ЁЯСЗ роЗроирпНрод роГрокрпАро▓рпНроЯрпИропрпБроорпН [String] роОрой рооро╛ро▒рпНро▒ро╡рпБроорпН
    partnerHometownMulti: { type: [String], default: undefined,
    required: false}, 
    
    partnerChevai: { type: String, trim: true },
    partnerPhysicalChallenge: { type: String, trim: true },
    partnerHouseType: { type: String },
    partnerGold: { type: String, trim: true },
    partnerSkinColor: { type: String},
    
    // ЁЯСЗ ро░ро╛роЪро┐ (Rasi) рооро▒рпНро▒рпБроорпН роироЯрпНроЪродрпНродро┐ро░роорпН (Star) роЖроХро┐роп роЗро░рогрпНроЯрпИропрпБроорпН [String] роОрой рооро╛ро▒рпНро▒ро╡рпБроорпН
    partnerStarMulti: { type: [String], default: undefined,
    required: false}, 
    partnerRasiMulti: { type: [String], default: undefined,
    required: false}, // ЁЯСИ роЗроирпНродрокрпН роГрокрпАро▓рпНроЯрпБродро╛ройрпН рокро┐ро┤рпИропрпИродрпН родроирпНродродрпБ
},


        // ======================================================
        // ЁЯФ╣ PHOTOS
        // ======================================================
        // This is now correctly referencing the defined schema
   // models/User.js - Main Schema-ро╡ро┐ро▓рпН роЙро│рпНро│ photos рокроХрпБродро┐

photos: {
    type: userPhotosSchema, 
    // ЁЯСЗ роЗродрпБродро╛ройрпН роорпБроХрпНроХро┐роп рооро╛ро▒рпНро▒роорпН. default: () => ({}) рокродро┐ро▓ро╛роХ роЗродрпИ роЕроорпИроХрпНроХро╡рпБроорпН.
    // роирпАроЩрпНроХро│рпН photos ро╡ро┐ро╡ро░роЩрпНроХро│рпИ ро╡ро┤роЩрпНроХро╡ро┐ро▓рпНро▓рпИ роОройрпНро▒ро╛ро▓рпН, Mongoose роЕродрпИ роорпБро┤рпБро╡родрпБрооро╛роХродрпН родро╡ро┐ро░рпНродрпНродрпБро╡ро┐роЯрпБроорпН.
    default: undefined,
    required: false
},
        
        // ======================================================
        // ЁЯФ╣ STATUS FLAGS
        // ======================================================
        status: {
            isProfileCompleted: { type: Boolean},
            isVerified: { type: Boolean},
        },
    },
    { timestamps: true }
);


module.exports = mongoose.model("User", userSchema);
